{"ast":null,"code":"import{DateTime}from\"luxon\";const API_KEY='a6c716790eb3598637764a0e00503f52';const BASE_URL=\"https://api.openweathermap.org/data\";const getWeatherData=(version,infoType,searchParams)=>{const url=new URL(\"\".concat(BASE_URL,\"/\").concat(version,\"/\").concat(infoType));url.search=new URLSearchParams({...searchParams,appid:API_KEY});return fetch(url).then(res=>res.json());};const formatCurrentWeather=data=>{const{coord:{lat,lon},main:{temp,feels_like,temp_min,temp_max,humidity},name,dt,sys:{country,sunrise,sunset},weather,wind:{speed}}=data;const{main:details,icon}=weather[0];return{lat,lon,temp,feels_like,temp_min,temp_max,humidity,name,dt,country,sunrise,sunset,details,icon,speed};};const formatForecastWeather=data=>{let{timezone,daily,hourly}=data;daily=daily.slice(1,6).map(d=>{return{title:formtToLocalTime(d.dt,timezone,'ccc'),temp:d.temp.day,icon:d.weather[0].icon};});hourly=hourly.slice(1,6).map(d=>{return{title:formtToLocalTime(d.dt,timezone,'hh:mm a'),temp:d.temp,icon:d.weather[0].icon};});return{timezone,daily,hourly};};const getFormattedWeatherData=async searchParams=>{const formattedCurrentedWeather=await getWeatherData('2.5',// Specify the version here\n'weather',searchParams).then(formatCurrentWeather);const{lat,lon}=formattedCurrentedWeather;const formattedForecastWeather=await getWeatherData('3.0','onecall',{lat,lon,exclude:'current,minutely,alerts',units:searchParams.units}).then(formatForecastWeather);return{...formattedCurrentedWeather,...formattedForecastWeather};};const formtToLocalTime=function(secs,zone){let format=arguments.length>2&&arguments[2]!==undefined?arguments[2]:\"cccc, dd LLL yyyy' | Local time: 'hh:mm a\";return DateTime.fromSeconds(secs).setZone(zone).toFormat(format);};const iconUrlFromCode=code=>\"http://openweathermap.org/img/wn/\".concat(code,\"@2x.png\");export default getFormattedWeatherData;export{formtToLocalTime,iconUrlFromCode};","map":{"version":3,"names":["DateTime","API_KEY","BASE_URL","getWeatherData","version","infoType","searchParams","url","URL","concat","search","URLSearchParams","appid","fetch","then","res","json","formatCurrentWeather","data","coord","lat","lon","main","temp","feels_like","temp_min","temp_max","humidity","name","dt","sys","country","sunrise","sunset","weather","wind","speed","details","icon","formatForecastWeather","timezone","daily","hourly","slice","map","d","title","formtToLocalTime","day","getFormattedWeatherData","formattedCurrentedWeather","formattedForecastWeather","exclude","units","secs","zone","format","arguments","length","undefined","fromSeconds","setZone","toFormat","iconUrlFromCode","code"],"sources":["/Users/jaimathur/Desktop/My-Coding-Projects/Weather-Website/src/services/weatherService.js"],"sourcesContent":["import { DateTime } from \"luxon\";\n\nconst API_KEY = 'a6c716790eb3598637764a0e00503f52';\nconst BASE_URL = \"https://api.openweathermap.org/data\";\n\nconst getWeatherData = (version, infoType, searchParams) => {\n    const url = new URL(`${BASE_URL}/${version}/${infoType}`);\n    url.search = new URLSearchParams({ ...searchParams, appid: API_KEY });\n\n    return fetch(url).then((res) => res.json());\n};\n\nconst formatCurrentWeather = (data) => {\n    const {\n        coord: { lat, lon },\n        main: { temp, feels_like, temp_min, temp_max, humidity },\n        name,\n        dt,\n        sys: { country, sunrise, sunset },\n        weather,\n        wind: { speed },\n    } = data;\n\n    const { main: details, icon } = weather[0];\n\n    return { lat, lon, temp, feels_like, temp_min, temp_max, humidity, name, dt, country, sunrise, sunset, details, icon, speed };\n};\n\nconst formatForecastWeather = (data) => {\n    let { timezone, daily, hourly } = data;\n    daily = daily.slice(1, 6).map((d) => {\n        return {\n            title: formtToLocalTime(d.dt, timezone, 'ccc'),\n            temp: d.temp.day,\n            icon: d.weather[0].icon,\n        };\n    });\n    hourly = hourly.slice(1, 6).map((d) => {\n        return {\n            title: formtToLocalTime(d.dt, timezone, 'hh:mm a'),\n            temp: d.temp,\n            icon: d.weather[0].icon,\n        };\n    });\n\n    return { timezone, daily, hourly };\n};\n\nconst getFormattedWeatherData = async (searchParams) => {\n    const formattedCurrentedWeather = await getWeatherData(\n        '2.5', // Specify the version here\n        'weather',\n        searchParams\n    ).then(formatCurrentWeather);\n\n    const { lat, lon } = formattedCurrentedWeather;\n\n    const formattedForecastWeather = await getWeatherData('3.0', 'onecall', {\n        lat,\n        lon,\n        exclude: 'current,minutely,alerts',\n        units: searchParams.units,\n    }).then(formatForecastWeather);\n\n    return { ...formattedCurrentedWeather, ...formattedForecastWeather };\n};\n\nconst formtToLocalTime = (secs, zone, format = \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\") =>\n    DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\n\n\nconst iconUrlFromCode = (code) => `http://openweathermap.org/img/wn/${code}@2x.png`;\n    \nexport default getFormattedWeatherData;\n\nexport {formtToLocalTime, iconUrlFromCode};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}