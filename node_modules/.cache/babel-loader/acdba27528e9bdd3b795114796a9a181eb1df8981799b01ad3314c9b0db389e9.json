{"ast":null,"code":"import { DateTime } from \"luxon\";\nconst API_KEY = 'a6c716790eb3598637764a0e00503f52';\nconst BASE_URL = \"https://api.openweathermap.org/data\";\nconst getWeatherData = (version, infoType, searchParams) => {\n  const url = new URL(`${BASE_URL}/${version}/${infoType}`);\n  url.search = new URLSearchParams({\n    ...searchParams,\n    appid: API_KEY\n  });\n  return fetch(url).then(res => res.json());\n};\nconst formatCurrentWeather = data => {\n  const {\n    coord: {\n      lat,\n      lon\n    },\n    main: {\n      temp,\n      feels_like,\n      temp_min,\n      temp_max,\n      humidity\n    },\n    name,\n    dt,\n    sys: {\n      country,\n      sunrise,\n      sunset\n    },\n    weather,\n    wind: {\n      speed\n    }\n  } = data;\n  const {\n    main: details,\n    icon\n  } = weather[0];\n  return {\n    lat,\n    lon,\n    temp,\n    feels_like,\n    temp_min,\n    temp_max,\n    humidity,\n    name,\n    dt,\n    country,\n    sunrise,\n    sunset,\n    details,\n    icon,\n    speed\n  };\n};\nconst formatForecastWeather = data => {\n  let {\n    timezone,\n    daily,\n    hourly\n  } = data;\n  daily = daily.slice(1, 6).map(d => {\n    return {\n      title: formtToLocalTime(d.dt, timezone, 'ccc'),\n      temp: d.temp.day,\n      icon: d.weather[0].icon\n    };\n  });\n  hourly = hourly.slice(1, 6).map(d => {\n    return {\n      title: formtToLocalTime(d.dt, timezone, 'hh:mm a'),\n      temp: d.temp,\n      icon: d.weather[0].icon\n    };\n  });\n  return {\n    timezone,\n    daily,\n    hourly\n  };\n};\nconst getFormattedWeatherData = async searchParams => {\n  const formattedCurrentedWeather = await getWeatherData('2.5',\n  // Specify the version here\n  'weather', searchParams).then(formatCurrentWeather);\n  const {\n    lat,\n    lon\n  } = formattedCurrentedWeather;\n  const formattedForecastWeather = await getWeatherData('3.0', 'onecall', {\n    lat,\n    lon,\n    exclude: 'current,minutely,alerts',\n    units: searchParams.units\n  }).then(formatForecastWeather);\n  return {\n    ...formattedCurrentedWeather,\n    ...formattedForecastWeather\n  };\n};\nconst formtToLocalTime = (secs, zone, format = \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\") => DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\nconst iconUrlFromCode = code => `http://openweathermap.org/img/wn/${code}@2x.png`;\nexport default getFormattedWeatherData;\nexport { formtToLocalTime, iconUrlFromCode };","map":{"version":3,"names":["DateTime","API_KEY","BASE_URL","getWeatherData","version","infoType","searchParams","url","URL","search","URLSearchParams","appid","fetch","then","res","json","formatCurrentWeather","data","coord","lat","lon","main","temp","feels_like","temp_min","temp_max","humidity","name","dt","sys","country","sunrise","sunset","weather","wind","speed","details","icon","formatForecastWeather","timezone","daily","hourly","slice","map","d","title","formtToLocalTime","day","getFormattedWeatherData","formattedCurrentedWeather","formattedForecastWeather","exclude","units","secs","zone","format","fromSeconds","setZone","toFormat","iconUrlFromCode","code"],"sources":["/Users/jaimathur/Desktop/My-Coding-Projects/Weather-Website/src/services/weatherService.js"],"sourcesContent":["import { DateTime } from \"luxon\";\n\nconst API_KEY = 'a6c716790eb3598637764a0e00503f52';\nconst BASE_URL = \"https://api.openweathermap.org/data\";\n\nconst getWeatherData = (version, infoType, searchParams) => {\n    const url = new URL(`${BASE_URL}/${version}/${infoType}`);\n    url.search = new URLSearchParams({ ...searchParams, appid: API_KEY });\n\n    return fetch(url).then((res) => res.json());\n};\n\nconst formatCurrentWeather = (data) => {\n    const {\n        coord: { lat, lon },\n        main: { temp, feels_like, temp_min, temp_max, humidity },\n        name,\n        dt,\n        sys: { country, sunrise, sunset },\n        weather,\n        wind: { speed },\n    } = data;\n\n    const { main: details, icon } = weather[0];\n\n    return { lat, lon, temp, feels_like, temp_min, temp_max, humidity, name, dt, country, sunrise, sunset, details, icon, speed };\n};\n\nconst formatForecastWeather = (data) => {\n    let { timezone, daily, hourly } = data;\n    daily = daily.slice(1, 6).map((d) => {\n        return {\n            title: formtToLocalTime(d.dt, timezone, 'ccc'),\n            temp: d.temp.day,\n            icon: d.weather[0].icon,\n        };\n    });\n    hourly = hourly.slice(1, 6).map((d) => {\n        return {\n            title: formtToLocalTime(d.dt, timezone, 'hh:mm a'),\n            temp: d.temp,\n            icon: d.weather[0].icon,\n        };\n    });\n\n    return { timezone, daily, hourly };\n};\n\nconst getFormattedWeatherData = async (searchParams) => {\n    const formattedCurrentedWeather = await getWeatherData(\n        '2.5', // Specify the version here\n        'weather',\n        searchParams\n    ).then(formatCurrentWeather);\n\n    const { lat, lon } = formattedCurrentedWeather;\n\n    const formattedForecastWeather = await getWeatherData('3.0', 'onecall', {\n        lat,\n        lon,\n        exclude: 'current,minutely,alerts',\n        units: searchParams.units,\n    }).then(formatForecastWeather);\n\n    return { ...formattedCurrentedWeather, ...formattedForecastWeather };\n};\n\nconst formtToLocalTime = (secs, zone, format = \"cccc, dd LLL yyyy' | Local time: 'hh:mm a\") =>\n    DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\n\n\nconst iconUrlFromCode = (code) => `http://openweathermap.org/img/wn/${code}@2x.png`;\n    \nexport default getFormattedWeatherData;\n\nexport {formtToLocalTime, iconUrlFromCode};\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,MAAMC,OAAO,GAAG,kCAAkC;AAClD,MAAMC,QAAQ,GAAG,qCAAqC;AAEtD,MAAMC,cAAc,GAAGA,CAACC,OAAO,EAAEC,QAAQ,EAAEC,YAAY,KAAK;EACxD,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAAE,GAAEN,QAAS,IAAGE,OAAQ,IAAGC,QAAS,EAAC,CAAC;EACzDE,GAAG,CAACE,MAAM,GAAG,IAAIC,eAAe,CAAC;IAAE,GAAGJ,YAAY;IAAEK,KAAK,EAAEV;EAAQ,CAAC,CAAC;EAErE,OAAOW,KAAK,CAACL,GAAG,CAAC,CAACM,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;AAC/C,CAAC;AAED,MAAMC,oBAAoB,GAAIC,IAAI,IAAK;EACnC,MAAM;IACFC,KAAK,EAAE;MAAEC,GAAG;MAAEC;IAAI,CAAC;IACnBC,IAAI,EAAE;MAAEC,IAAI;MAAEC,UAAU;MAAEC,QAAQ;MAAEC,QAAQ;MAAEC;IAAS,CAAC;IACxDC,IAAI;IACJC,EAAE;IACFC,GAAG,EAAE;MAAEC,OAAO;MAAEC,OAAO;MAAEC;IAAO,CAAC;IACjCC,OAAO;IACPC,IAAI,EAAE;MAAEC;IAAM;EAClB,CAAC,GAAGlB,IAAI;EAER,MAAM;IAAEI,IAAI,EAAEe,OAAO;IAAEC;EAAK,CAAC,GAAGJ,OAAO,CAAC,CAAC,CAAC;EAE1C,OAAO;IAAEd,GAAG;IAAEC,GAAG;IAAEE,IAAI;IAAEC,UAAU;IAAEC,QAAQ;IAAEC,QAAQ;IAAEC,QAAQ;IAAEC,IAAI;IAAEC,EAAE;IAAEE,OAAO;IAAEC,OAAO;IAAEC,MAAM;IAAEI,OAAO;IAAEC,IAAI;IAAEF;EAAM,CAAC;AACjI,CAAC;AAED,MAAMG,qBAAqB,GAAIrB,IAAI,IAAK;EACpC,IAAI;IAAEsB,QAAQ;IAAEC,KAAK;IAAEC;EAAO,CAAC,GAAGxB,IAAI;EACtCuB,KAAK,GAAGA,KAAK,CAACE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,GAAG,CAAEC,CAAC,IAAK;IACjC,OAAO;MACHC,KAAK,EAAEC,gBAAgB,CAACF,CAAC,CAAChB,EAAE,EAAEW,QAAQ,EAAE,KAAK,CAAC;MAC9CjB,IAAI,EAAEsB,CAAC,CAACtB,IAAI,CAACyB,GAAG;MAChBV,IAAI,EAAEO,CAAC,CAACX,OAAO,CAAC,CAAC,CAAC,CAACI;IACvB,CAAC;EACL,CAAC,CAAC;EACFI,MAAM,GAAGA,MAAM,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,GAAG,CAAEC,CAAC,IAAK;IACnC,OAAO;MACHC,KAAK,EAAEC,gBAAgB,CAACF,CAAC,CAAChB,EAAE,EAAEW,QAAQ,EAAE,SAAS,CAAC;MAClDjB,IAAI,EAAEsB,CAAC,CAACtB,IAAI;MACZe,IAAI,EAAEO,CAAC,CAACX,OAAO,CAAC,CAAC,CAAC,CAACI;IACvB,CAAC;EACL,CAAC,CAAC;EAEF,OAAO;IAAEE,QAAQ;IAAEC,KAAK;IAAEC;EAAO,CAAC;AACtC,CAAC;AAED,MAAMO,uBAAuB,GAAG,MAAO1C,YAAY,IAAK;EACpD,MAAM2C,yBAAyB,GAAG,MAAM9C,cAAc,CAClD,KAAK;EAAE;EACP,SAAS,EACTG,YACJ,CAAC,CAACO,IAAI,CAACG,oBAAoB,CAAC;EAE5B,MAAM;IAAEG,GAAG;IAAEC;EAAI,CAAC,GAAG6B,yBAAyB;EAE9C,MAAMC,wBAAwB,GAAG,MAAM/C,cAAc,CAAC,KAAK,EAAE,SAAS,EAAE;IACpEgB,GAAG;IACHC,GAAG;IACH+B,OAAO,EAAE,yBAAyB;IAClCC,KAAK,EAAE9C,YAAY,CAAC8C;EACxB,CAAC,CAAC,CAACvC,IAAI,CAACyB,qBAAqB,CAAC;EAE9B,OAAO;IAAE,GAAGW,yBAAyB;IAAE,GAAGC;EAAyB,CAAC;AACxE,CAAC;AAED,MAAMJ,gBAAgB,GAAGA,CAACO,IAAI,EAAEC,IAAI,EAAEC,MAAM,GAAG,2CAA2C,KACtFvD,QAAQ,CAACwD,WAAW,CAACH,IAAI,CAAC,CAACI,OAAO,CAACH,IAAI,CAAC,CAACI,QAAQ,CAACH,MAAM,CAAC;AAG7D,MAAMI,eAAe,GAAIC,IAAI,IAAM,oCAAmCA,IAAK,SAAQ;AAEnF,eAAeZ,uBAAuB;AAEtC,SAAQF,gBAAgB,EAAEa,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}